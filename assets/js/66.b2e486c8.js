(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{451:function(t,s,a){"use strict";a.r(s);var n=a(28),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[t._v("#")]),t._v(" 描述")]),t._v(" "),a("p",[t._v("在一个指定字符串中执行一个搜索匹配。返回一个数组或 "),a("code",[t._v("null")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[t._v("#")]),t._v(" 参数")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("参数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("string")]),t._v(" "),a("td",[t._v("必需。要匹配正则表达式的字符串。")])])])]),t._v(" "),a("h2",{attrs:{id:"返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),a("p",[t._v("如果匹配成功，"),a("code",[t._v("exec()")]),t._v(" 方法返回一个数组，并更新正则表达式对象的属性。")]),t._v(" "),a("p",[t._v("返回的数组将完全匹配成功的文本作为第一项，将正则括号里匹配成功的作为数组元素填充到后面。")]),t._v(" "),a("p",[t._v("如果匹配失败，返回 "),a("code",[t._v("null")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),a("h3",{attrs:{id:"返回值-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回值-2"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'leftTop'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^([a-z]*)([A-Z]\\w*)*")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   0: "leftTop"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   1: "left"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   2: "Top"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   groups: undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   index: 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   input: "leftTop"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   length: 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ]")]),t._v("\n")])])]),a("p",[t._v("数组第一个元素：完全匹配成功的文本")]),t._v(" "),a("p",[t._v("数组第二个元素：匹配到正则第一个括号内表达式的文本")]),t._v(" "),a("p",[t._v("数组第三个元素：匹配到正则第二个括号内表达式的文本")]),t._v(" "),a("p",[t._v("（以此类推……）")]),t._v(" "),a("p",[t._v("数组的 "),a("code",[t._v("index")]),t._v(" 属性：匹配成功的文本首个字符在原表达式中的索引")]),t._v(" "),a("p",[t._v("数组的 "),a("code",[t._v("input")]),t._v(" 属性：用于匹配正则表达式的原始字符串")]),t._v(" "),a("h3",{attrs:{id:"返回-null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回-null"}},[t._v("#")]),t._v(" 返回 null")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("abc")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'javascript'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n")])])]),a("h3",{attrs:{id:"更新正则表达式对象的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新正则表达式对象的属性"}},[t._v("#")]),t._v(" 更新正则表达式对象的属性")]),t._v(" "),a("p",[t._v("正则表达式在有 "),a("code",[t._v("g")]),t._v(" 标志的情况下，每次执行 "),a("code",[t._v("exec()")]),t._v(" 方法后，会更新正则表达式的 "),a("code",[t._v("lastIndex")]),t._v(" 属性。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(hello \\S+)")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有 g 标志")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is a hello world! This is a hello regexp!'")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   0: "hello world!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   1: "hello world!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   groups: undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   index: 10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   input: "This is a hello world! This is a hello regexp!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   length: 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ]")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 22")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即 world! 后面的那个空格的索引")]),t._v("\n\nreg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二次执行 exec() 时，从 reg.lastIndex 开始向后索引")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   0: "hello regexp!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   1: "hello regexp!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   groups: undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   index: 33")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//   input: "This is a hello world! This is a hello regexp!"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   length: 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ]")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);